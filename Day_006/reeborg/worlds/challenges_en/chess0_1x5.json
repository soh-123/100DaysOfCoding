{
  "robots": [
    {
      "x": 1,
      "y": 1,
      "_prev_x": 1,
      "_prev_y": 1,
      "_prev_orientation": 0,
      "objects": {},
      "_orientation": 0,
      "possible_initial_positions": [
        [
          1,
          1
        ]
      ],
      "_is_leaky": true,
      "_trace_history": [],
      "_trace_style": "default",
      "_trace_color": "seagreen",
      "__id": 7,
      "model": "light blue"
    }
  ],
  "walls": {},
  "description": [
    "<h1>Checkerboard</h1>",
    "<h2> Special case: 1 x 5</h2>",
    "<p>This task is for a fixed size checkerboard.",
    "This can be used as practice or as a test case when working on a solution for the general problem.",
    "If you only try to solve this particular case, it is a very easy task.</p>",
    "DIFFICULTY1",
    "<h1>The general problem</h1>",
    "<p>Help Reeborg to put tokens on the checkerboard. Reeborg carries",
    "    more than enough tokens that are needed to solve this task.",
    "    The general problem, with a checkerboard of unknown size, is a real challenge.",
    "    You <em>are not allowed</em> to use variables, nor function arguments.",
    "    Below are a few suggestions that you may find useful.</p>",
    "<p>the program <em>I</em> wrote as a solution was such that",
    "    Reeborg put tokens going in alternating directions in each row as illustrated below.</p>",
    "<img src='worlds/images/checker_board_1.png'>",
    "<img src='worlds/images/checker_board_2.png'>",
    "<p>When Reeborg is ready to go to the next row, it is facing North.",
    "    If you have read the programming tutorial for Reeborg,",
    "    you know that Reeborg has a broken compass: using it,",
    "    Reeborg only know if it is facing North (top of the screen) or not.",
    "    In a program, this is done using",
    "    <code>is_facing_north()</code>.  ",
    "    With the strategy I used, Reeborg will know that the task has been completed if:",
    "<ul><li>it is ready to go to the next row;</li>",
    "    <li>it is facing North;</li>",
    "    <li>A wall is blocking the way.</li>",
    "</ul>",
    "    For a program written using Python,",
    "    this suggests that a solution could be written as:",
    "</p>",
    "<pre class='python'>",
    "while not (is_facing_north() and wall_in_front()):",
    "    do_something()",
    "</pre>",
    "<p>A second thing I found useful to do was to help Reeborg decide",
    "    if it needed to turn to its left or to its right",
    "    when it needed to put tokens down. What Reeborg needs to know is that",
    "    it is facing North and whether or not a wall is to its right.</p>",
    "<p>Finally, one can define a function that can result in Reeborg facing North,",
    "    no matter what its original direction is.</p>",
    "<p>It is up to you to write a complete program to solve the general case.",
    "    the exact strategy you use is entirely up to you to decide.</p>",
    "<h3>What you need to know</h3>",
    "<ul><li>The functions <code>move()</code>, <code>turn_left()</code> and <code>put()</code>.</li>",
    "<li>The conditions <code>front_is_clear()</code> or <code>wall_in_front()</code>,",
    "<code>right_is_clear()</code> or <code>wall_on_right()</code>, and <code>is_facing_north()</code>.</li>",
    "<li>How to use <code>while</code> loops and <code>if/else</code> statements.</li>",
    "<li>How to use the keywords <code>not</code> and <code>and</code> in Python,",
    "or the equivalent operators if you use Javascript.</li>",
    "    <li>How to define functions and know how to use the",
    "        <code>return</code> keyword to end the execution of a function.</li>",
    "</ul>",
    "DIFFICULTY9",
    "    "
  ],
  "small_tiles": false,
  "rows": 10,
  "cols": 10,
  "onload": [
    "var width, height, x, y, nb_object;",
    "",
    "width = 1;",
    "height = 5;",
    "",
    "RUR.set_model('light blue');",
    "RUR.set_world_size(width, height);",
    "",
    "",
    "for (x=1; x<= width; x++) {",
    "    for (y=1; y<=height; y++) {",
    "        if ( (x+y)%2 == 0) {",
    "            RUR.add_object(\"token\", x, y, {goal: true});",
    "            RUR.add_colored_tile(\"black\", x, y);",
    "        } else {",
    "            RUR.add_colored_tile(\"beige\", x, y);",
    "        }",
    "    }",
    "}",
    "// give Reeborg more than the number of tokens required",
    "// so that we cannot use the information about",
    "// whether or not we still have tokens to determine if",
    "// the task has been accomplished.",
    "RUR.give_object_to_robot(\"token\", width*height);",
    ""
  ]
}
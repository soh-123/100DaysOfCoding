{
  "robots": [],
  "walls": {},
  "description": [
    "<h1>Find the path home</h1>",
    "<p>Reeborg loves to visit unexplored places.",
    "    As a precaution, Reeborg always puts down markers",
    "    along the way so that he can find its way back.</p>",
    "<p>It is getting dark and Reeborg must head",
    "    back home. Help Reeborg find the way back",
    "    without getting stuck in the mud,",
    "    by following the markers that were put down.</p>",
    "<p>It might be a good idea for Reeborg to collect the markers",
    "so as to avoid leaving trash behind and to have some markers for his next adventure.</p>",
    "<h2>What you need to know</h2>",
    "<ul><li>The functions <code>move()</code> ",
    "    and <code>turn_left()</code></li>",
    "    <li>The conditions <code>object_here()</code> and",
    "        <code>at_goal()</code>.</li>",
    "    <li>How to use <code>while</code> loops and",
    "        <code>if</code> statements.</li></ul>",
    "DIFFICULTY4",
    "        "
  ],
  "small_tiles": false,
  "rows": 14,
  "cols": 14,
  "onload": [
    "var width, height, path, paths, i, x, y;",
    "var x_init, y_init, x_fin, y_fin;",
    "var inverse_x, inverse_y, inverse_path;",
    "var first, last;",
    "",
    "width = 14;",
    "height = 14;",
    "paths = [];",
    "",
    "RUR.fill_background('mud');",
    "",
    "// replace mud only on squares reachable in one step",
    "function add_black(x, y) {",
    "    RUR.add_colored_tile('black', x, y);",
    "    if (x > 1) {",
    "        RUR.add_colored_tile('black', x-1, y);",
    "    }",
    "    if (x < width) {",
    "        RUR.add_colored_tile('black', x+1, y);",
    "    }",
    "    if (y > 1) {",
    "        RUR.add_colored_tile('black', x, y-1);",
    "    }    ",
    "    if (y < height) {",
    "        RUR.add_colored_tile('black', x, y+1);",
    "    }    ",
    "}",
    "",
    "path = [[2, 4], [3, 4], [4, 4], [4, 5], [4, 6], ",
    "        [4, 7], [5, 7], [6, 7], [7, 7], [8, 7], [8, 6], ",
    "        [8, 5], [9, 5], [10, 5], [11, 5], [12, 5], ",
    "        [12, 6], [12, 7], [12, 8], [12, 9], [12, 10], ",
    "        [12, 11], [12, 12], [12, 13]];",
    "",
    "paths.push(path);",
    "",
    "path = [[7, 8], [8, 8], [9, 8], ",
    "        [10, 8], [10, 7], [10, 6], [10, 5], ",
    "        [10, 4], [10, 3], [9, 3], [8, 3], [7, 3], [6, 3], ",
    "        [5, 3], [4, 3], [3, 3], [3, 4], ",
    "        [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], ",
    "        [3, 10], [3, 11], [3, 12], [4, 12], ",
    "        [5, 12], [6, 12], [7, 12], ",
    "        [8, 12], [9, 12], [10, 12], ",
    "        [11, 12], [12, 12], [13, 12]];",
    "",
    "paths.push(path);",
    "",
    "// we have two paths; we can reverse the start and",
    "// finish position, flip them vertically and flip",
    "// them horizontally - this will give us 16",
    "// different cases",
    "",
    "path = paths[RUR.randint(0, 1)];",
    "inverse_x = RUR.randint(0, 1);",
    "inverse_y = RUR.randint(0, 1);",
    "inverse_path = RUR.randint(0, 1);",
    "",
    "if (inverse_path) {",
    "    first = path.length - 2; // first square to put down",
    "    last = 0;",
    "    x_init = path[path.length - 1][0];",
    "    y_init = path[path.length - 1][1];",
    "    x_fin = path[last][0];",
    "    y_fin = path[last][1];",
    "    if (inverse_x) {",
    "        x_init = width + 1 - x_init;",
    "        x_fin = width + 1 - x_fin;",
    "    }",
    "    if (inverse_y) {",
    "        y_init = height + 1 - y_init;",
    "        y_fin = height + 1 - y_fin;",
    "    }",
    "} else {",
    "    first = 1;",
    "    last = path.length - 1;",
    "    x_init = path[0][0];",
    "    y_init = path[0][1];",
    "    x_fin = path[last][0];",
    "    y_fin = path[last][1];",
    "    if (inverse_x) {",
    "        x_init = width + 1 - x_init;",
    "        x_fin = width + 1 - x_fin;",
    "    }",
    "    if (inverse_y) {",
    "        y_init = height +1 - y_init;",
    "        y_fin = height +1 - y_fin;",
    "    }",
    "}",
    "",
    "add_black(x_init, y_init);",
    "add_black(x_fin, y_fin);",
    "",
    "_r = new UsedRobot(x_init, y_init);",
    "RUR.add_final_position('house', x_fin, y_fin);",
    "",
    "i = first;",
    "",
    "while (true) {",
    "    x = path[i][0];",
    "    if (inverse_x) {",
    "        x = width + 1 -x;",
    "    }",
    "    y = path[i][1];",
    "    if (inverse_y) {",
    "        y = height + 1 - y;",
    "    }",
    "    RUR.add_object('square', x, y);",
    "    add_black(x, y);",
    "    if (inverse_path) {",
    "        i--;",
    "    } else {",
    "        i++;",
    "    }",
    "    if (i == last) {",
    "        break;",
    "    }",
    "}",
    ""
  ]
}
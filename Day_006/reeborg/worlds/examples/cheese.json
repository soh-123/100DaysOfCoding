{
  "small_tiles": false,
  "rows": 9,
  "cols": 6,
  "editor": "# suggestion: speed up the display of the solution\nthink(100)\n\ngo_to_top_left()\n\nwhile right_is_clear():\n    eat_row() # try eat_row(\"cheese\") instead\n    go_back()\neat_row(\"cheese\")\n",
  "pre": "# The code in the Onload editor was run in a \n# separate context/scope. The code in the Pre\n# editor will be run together with the student's code\n# so we redefine functions here\n\n\n# We want the user to \"eat\" the cheese and not\n# simply taking it\neat = take\ndef take():\n    raise ReeborgError(\"I do not know how to do this.\")\n\n# Our solution will be to have the rat go to\n# the top left of the world, and then sweep down,\n# row by row, eating all the cheese\ndef go_to_top_left():\n    while not is_facing_north():\n        turn_left()\n    while front_is_clear():\n        move()\n    turn_left()\n    while front_is_clear():\n        move()\n    turn_left()\n    turn_left()\n\n\ndef eat_row(food=None):\n    while front_is_clear():\n        if object_here(food):\n            # if we don't specify the food, we\n            # might end up eating poison\n            eat(food)\n        move()\n    if object_here(food):\n        eat(food)\n\ndef go_back():\n    turn_left()\n    turn_left()\n    while front_is_clear():\n        move()\n    turn_left()\n    move()\n    turn_left()\n\n# The solution to this world could possibly\n# take more than the default 1000 maximum steps;\n# let's increase it just to be sure and to\n# provide an example for what is an FAQ\nset_max_nb_steps(2000)\n\n",
  "post": "# If poison has been eaten, an exception would\n# already have been raised. Time to see if\n# the goal has been accomplished\nfrom browser import window\nif carries_object(\"cheese\") != window[\"nb_cheese\"]:\n    raise ReeborgError(\"Some cheese was left behind!\")\n\nraise ReeborgOK(\"All the cheese has been eaten !\")\n",
  "description": "<h2>Eat the cheese!</h2>\n<p>This world demonstrates how to use custom images\n    for robots and objects.</p>\n<p>The code in the Onload editor is:</p>\nINSERT_ONLOAD\n<p>The code in the Pre editor is:</p>\nINSERT_PRE\n<p>To see if the goal has been accomplished,\n    we have the following code in the Post editor.<p>\nINSERT_POST\n<p>Here's a solution you can try. If you do not\n    specify which food to eat, you might regret\n    your decision.</p>\nINSERT_EDITOR\n",
  "onload": "# Adapted from a world created by Vincent Maille,\n# co-author of \"Les robots\".\nRUR.onload_set_programming_language(\"python\")\n\nfrom random import randint\nfrom browser import window\n\n# Randomly change the world dimensions each time\n# the world is (re)loaded.\nmax_x = randint(5, 10)\nmax_y = randint(5, 10)\nRUR.set_world_size(max_x, max_y)\n\n# Keep track of positions used so as to\n# not reuse an existing position twice\npositions = []\ndef new_position():\n    while True:\n        x = randint(1, max_x)\n        y = randint(1, max_y)\n        if (x, y) not in positions:\n            positions.append((x, y))\n            return x, y\n\n# We want to have a rat instead of a robot\nRUR.new_robot_images({\"model\":\"rat\",\n    \"east\": \"/src/images/rat_e.png\",\n    \"north\": \"/src/images/rat_n.png\",\n    \"west\": \"/src/images/rat_w.png\",\n    \"south\": \"/src/images/rat_s.png\"\n    })\n\n# We also want to have cheese to eat\n# and poison to avoid\n\nRUR.add_new_thing({\"name\": \"cheese\",\n    \"url\": \"/src/images/fromage.png\",\n    \"info\": \"Safe to eat.\"})\n\nRUR.add_new_thing({\"name\": \"poison\",\n    \"url\": \"/src/images/poison.png\",\n    \"fatal\": \"poison\",\n    \"info\": \"Do not eat\",\n    \"message\": \"Gluttony is a terrible thing.<br><img src='/src/images/mort.png'>\"\n})\n\n# time to add the robot\nx, y = new_position()\nreeborg = UsedRobot(x, y)\nreeborg.set_model(\"rat\") # change the default images\n\n# add cheese and poison\n\nnb_cheese = randint(5, 8)\nfor i in range(nb_cheese):\n    x, y = new_position()\n    RUR.add_object(\"cheese\", x, y)\n\n# save the value in a globally known object/dict\n# for later reference\nwindow[\"nb_cheese\"] = nb_cheese\n\nnb_poison = randint(3, 5)\nfor i in range(nb_poison):\n    x, y = new_position()\n    RUR.add_object(\"poison\", x, y)\n",
  "robots": [
    {
      "x": 7,
      "y": 2,
      "objects": {},
      "model": "rat",
      "_orientation": 0,
      "_is_leaky": true,
      "_prev_x": 7,
      "_prev_y": 2,
      "_prev_orientation": 0,
      "_trace_history": [],
      "_trace_style": "default",
      "_trace_color": "seagreen",
      "__id": 18
    },
    {
      "x": 4,
      "y": 3,
      "objects": {},
      "model": "rat",
      "_orientation": 0,
      "_is_leaky": true,
      "_prev_x": 4,
      "_prev_y": 3,
      "_prev_orientation": 0,
      "_trace_history": [],
      "_trace_style": "default",
      "_trace_color": "seagreen",
      "__id": 22
    }
  ],
  "objects": {
    "2,5": {
      "cheese": 1
    },
    "7,1": {
      "cheese": 1
    },
    "1,2": {
      "cheese": 2
    },
    "8,1": {
      "cheese": 1
    },
    "1,5": {
      "cheese": 1
    },
    "8,4": {
      "poison": 1
    },
    "3,5": {
      "poison": 1
    },
    "3,1": {
      "poison": 1
    },
    "4,4": {
      "poison": 1
    },
    "6,4": {
      "cheese": 1
    },
    "5,7": {
      "cheese": 1
    },
    "6,9": {
      "cheese": 1
    },
    "5,5": {
      "cheese": 1
    },
    "3,4": {
      "poison": 1
    },
    "2,9": {
      "poison": 1
    },
    "1,6": {
      "poison": 1
    },
    "2,1": {
      "poison": 1
    }
  }
}